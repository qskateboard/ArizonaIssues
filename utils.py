import random
from datetime import datetime, timedelta
import requests
import re
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup


def read_file(file):
    try:
        f = open("" + file + ".txt", "r")
        return f.read()
    except:
        f = open("" + file + ".txt", "w")
        f.close()
        return ""


def parse_nickname(text):
    nickname = re.findall("([a-zA-Z]{2,}[_| ][a-zA-Z]{2,})", text)
    if len(nickname) > 0:
        nickname = nickname[0]
        if " " in nickname:
            nickname = nickname.replace(" ", "_")

        words = nickname.split("_")
        for word in words:
            if word[0].islower():
                arr = [*word]
                arr[0] = str(arr[0]).upper()
                nickname = nickname.replace(word, ''.join(arr))
        return nickname
    return False


def get_prefix(username):
    if username:
        words = username.split("_")
        prefix = words[0][0] + "." + words[1]
        return prefix
    return False


def send_message(peer_id, text):
    payload = {
        "random_id": random.randint(1, 10000000),
        "peer_id": peer_id,
        "message": text,
        "dont_parse_links": "0",
        "disable_mentions": "0",
        "intent": "default",
        "access_token": "",
        "v": "5.131",
    }
    requests.post("https://api.vk.com/method/messages.send", data=payload)


def get_history(peer_id, count):
    payload = {
        "peer_id": peer_id,
        "count": count,
        "access_token": "",
        "v": "5.131",
    }
    r = requests.post("https://api.vk.com/method/messages.getHistory", data=payload)
    return r.json()['response']['items']


def get_form(name):
    with open(f"forms/{name}.txt", encoding="utf-8") as f:
        return f.read()


def get_game_form(text):
    content = read_file("forms")
    result = []
    for form in content.split("\n"):
        if text in form:
            result.append(form)
    return result


def del_game_form(text):
    content = read_file("forms")
    result = []
    for form in content.split("\n"):
        if text not in form:
            result.append(form)
    f = open("forms.txt", "w")
    f.write('\n'.join(result))
    f.close()


def add_game_form(text):
    f = open("forms.txt", "a+")
    f.write("\n" + text)
    f.close()


def get_monday():
    now = datetime.now()
    monday = now - timedelta(days=now.weekday())
    time = monday.replace(hour=0, minute=0, second=0)
    return int(time.timestamp())


def get_player(nickname):
    try:
        r = requests.get(f"https://api.vprikol.dev/find?server=16&nick={nickname}&token=")
        if r.status_code == 400 or r.status_code == 422 or r.status_code == 504:
            return False
        return r.json()
    except:
        return False


def post_validator(cnt):
    valid = False
    content = [cnt[0].lower(), cnt[1]]
    if "–∂–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞" in content[0] and "–ø—Ä–∏—á–∏–Ω–∞" in content[0]:
        if "1. –í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫" in content[1] and "2. –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è" in content[1] and \
                "3. –°—É—Ç—å –∂–∞–ª–æ–±—ã" in content[1] and "4. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞" in content[1] and \
                "5. –¢–∞–π–º-–∫–æ–¥ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–∞ –≤–∏–¥–µ–æ" in content[1] and "6. –¢–∞–π–º-–∫–æ–¥ /id –∏ /time" in content[1] and \
                "7. –Ø –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∏—Ü–∞—é —Å–≤–æ—ë –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –≤—ã–¥–∞–Ω–Ω—ã–º –º–Ω–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ–º" in content[1] and \
                "8. –í —Å–ª—É—á–∞–µ –æ–±–º–∞–Ω–∞ –≤ –ª—é–±–æ–º –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –∂–∞–ª–æ–±—ã —è –≥–æ—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω –¥–æ 2000 –¥–Ω–µ–π –∑–∞ –æ–±–º–∞–Ω" in content[1]:
            valid = True
    return valid


def post_validator2(cnt):
    valid = False
    content = [cnt[0].lower(), cnt[1]]
    if "–∂–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞" in content[0] and "–ø—Ä–∏—á–∏–Ω–∞" in content[0]:
        if "–í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫" in content[1] and "–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è" in content[1] and \
                "–°—É—Ç—å –∂–∞–ª–æ–±—ã" in content[1] and "–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞" in content[1]:
            valid = True
    return valid


def post_validator3(cnt):
    valid = False
    content = [cnt[0].lower(), cnt[1]]
    if "gilbert" in content[0]:
        if "–í–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫" in content[1] and "–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è" in content[1] and \
                "–°—É—Ç—å –∂–∞–ª–æ–±—ã" in content[1] and "–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞" in content[1]:
            valid = True
    return valid


def get_prefix_markup(thread, opened, sticky):
    markup = InlineKeyboardMarkup()

    markup.add(InlineKeyboardButton("‚ö†Ô∏è –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", callback_data=f"prefix {thread} 15 {opened} {sticky}"),
               InlineKeyboardButton("‚úÖ –ñ–∞–ª–æ–±–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞", callback_data=f"prefix {thread} 17 {opened} {sticky}"))
    markup.add(InlineKeyboardButton("üïî –û–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ", callback_data=f"prefix {thread} 22 {opened} {sticky}"),
               InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ", callback_data=f"prefix {thread} 18 {opened} {sticky}"))
    markup.add(InlineKeyboardButton("‚ùå", callback_data=f"delete_msg"))

    return markup


def get_message_markup(thread, scopes, nickname=""):
    markup = InlineKeyboardMarkup()
    markup.row_width = 3
    if "form" in scopes:
        markup.add(InlineKeyboardButton("‚ùå –ì–æ—Å", callback_data=f"form {thread}"),
                   InlineKeyboardButton("‚ùå –ù–µ —Å–æ—Å—Ç", callback_data=f"pform {thread}"),
                   InlineKeyboardButton("‚ùå –ë–∞–Ω–¥—ã", callback_data=f"bform {thread}"))
        markup.add(InlineKeyboardButton("üñ• –°–∫—Ä–∏–Ω", callback_data=f"screenshot {thread}"),
                   InlineKeyboardButton("üÜî /id –∏–ª–∏ /time", callback_data=f"id_time {thread}"),
                   InlineKeyboardButton("üïî –¢–∞–π–º–∫–æ–¥—ã", callback_data=f"timecode {thread}"),
                   InlineKeyboardButton("üìπ –í–∏–¥–µ–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ", callback_data=f"not_video {thread}"))
    if "su" in scopes:
        markup.add(InlineKeyboardButton("üëÆ‚Äç‚ôÇÔ∏è –í–∞–º –≤ —Å—É–¥", callback_data=f"su {thread}"),
                   InlineKeyboardButton("üëç –û–ø—Ä–∞ –ø—Ä–∏–Ω—è—Ç–∞", callback_data=f"su_close_nice {thread}"),
                   InlineKeyboardButton("üëé –û–ø—Ä–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞", callback_data=f"su_close_bad {thread}"))
    if "band" in scopes:
        markup.add(InlineKeyboardButton("üóø –û–ø—Ä–∞ –º–æ–º–µ–Ω—Ç–∞", callback_data=f"band_moment {thread}"),
                   InlineKeyboardButton("üïî –§—É–ª–ª –æ–ø—Ä–∞", callback_data=f"band_full_opra {thread}"),
                   InlineKeyboardButton("üëç –û–ø—Ä–∞ –ø—Ä–∏–Ω—è—Ç–∞", callback_data=f"band_close_nice {thread}"))
    if "punish" in scopes:
        markup.add(InlineKeyboardButton("‚ÄºÔ∏è –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", callback_data=f"punish {thread}"),
                   InlineKeyboardButton("üóí –°–≤–æ–π —Ç–µ–∫—Å—Ç", callback_data=f"edit {thread}"))
    if "open" in scopes:
        markup.add(InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å", callback_data=f"open {thread}"),
                   InlineKeyboardButton("üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å/–æ—Ç–∫—Ä–µ–ø–∏—Ç—å", callback_data=f"pin {thread}"))
    markup.add(InlineKeyboardButton("‚ö†Ô∏è –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", callback_data=f"stick {thread}"),
                   InlineKeyboardButton("‚úÖ –ñ–∞–ª–æ–±–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞", callback_data=f"begin {thread}"))
    markup.add(InlineKeyboardButton(f"üë§ {nickname}", callback_data=f"get_stats {nickname}"))
    return markup


def get_form_markup(chat_id, message_id):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_form {chat_id} {message_id}"),
               InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_form {chat_id} {message_id}"))

    return markup


def get_info_keyboard(nickname):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"get_nick {nickname}"),
               InlineKeyboardButton("‚öôÔ∏è –õ–æ–≥–∏", callback_data=f"get_log {nickname}"))
    markup.add(InlineKeyboardButton("üóí –ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä—É–º—É", callback_data=f"forum_find 0 {nickname}"),
               InlineKeyboardButton("üí° –ü–æ–∏—Å–∫ –ø–æ –∂–∞–ª–æ–±–∞–º", callback_data=f"forum_find 1 {nickname}"))
    markup.add(InlineKeyboardButton("‚ùå –ò—Å—Ç–æ—Ä–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π", callback_data=f"get_punish {nickname}"))
    markup.add(InlineKeyboardButton("‚ùå", callback_data=f"delete_msg"))

    return markup


def get_delete_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùå", callback_data=f"delete_msg"))
    return markup


def two_factor():
    code = input('Code? ')
    return code, True
